<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- Spring的配置文件，这里主要配置和业务逻辑有关的 -->

	<!-- 指定Spring IOC容器扫描的包 -->
	<!-- 通过resource-pattern 指定扫描的资源 -->
	<!-- context:exclude-filter 子节点指定排除哪些指定表达式的组件 -->
	<!-- context:include-filter 子节点指定包含哪些表达式的组件，改子节点需要use-default-filters 配合使用 -->
	<context:component-scan base-package="com.nbi.service"
		resource-pattern="impl/*.class" use-default-filters="false">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Service" />
	</context:component-scan>

	<!-- ====================数据源、事务控制...========================= -->
	<context:property-placeholder location="classpath:dbconfig.properties" />
	<!-- 使用外部化属性文件的属性 -->
	<bean id="pooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
		<property name="driverClass" value="${jdbc.driverClass}"></property>
		<property name="user" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>

	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="pooledDataSource"></property>
	</bean>

	<!-- ====================配置和MyBatis的整合======================== -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 指定MyBatis全局配置文件的位置 -->
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<property name="dataSource" ref="pooledDataSource"></property>
		<!-- 指定mybatis.mapper文件的位置 -->
		<property name="mapperLocations" value="classpath:com/nbi/mappers/*.xml"></property>
	</bean>

	<!-- 配置扫描器，将mybatis接口的实现加入到ioc容器中 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 扫描所有dao接口的实现，加入到ioc容器中 -->
		<property name="basePackage" value="com.nbi.dao"></property>
	</bean>
	<!-- ============================================================ -->

	<!-- =======================配置事务管理器======================== -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="pooledDataSource"></property>
	</bean>

	<!-- 开启基于注解的事务，使用xml配置形式的事务（必要主要的都是使用配置形式） -->
	<!-- 配置事务切入点，以及把事务属性关联起来 -->
	<aop:config>
		<!-- 切入点表达式 -->
		<aop:pointcut id="txPointCut" expression="execution(* com.nbi.service.*.*(..))" />
		<!-- 配置事务增强 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCut" />
	</aop:config>

	<!-- 配置事务增强，事务如何切入 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 根据方法名指定事务属性 -->
			<!-- 所有方法都是事务方法 -->
			<tx:method name="*" />
			<!-- 以get开始的所有方法,其他类似 -->
			<tx:method name="get*" propagation="REQUIRED" read-only="true" />
			<tx:method name="find*" propagation="REQUIRED" read-only="true" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>

	<!-- Spring配置文件的核心点（数据源、与MyBatis的整合，事务控制） -->

	<import resource="spring-shiro.xml" />

</beans>
